#BlueJ class context
comment0.target=Game
comment0.text=\n\ Simulation\ of\ a\ cellular\ biological\ experiment.\n\ For\ more\ info\ see\ https\://en.wikipedia.org/wiki/Conway's_Game_of_Life\n\ \n\ See\ http\://www.bitstorm.org/gameoflife/\ for\ a\ demonstration\ \n\ of\ a\ fully\ implemented\ version,\ or\ JavaScript\ version\ I\ showed\ in\ class\:\n\ http\://pmav.eu/stuff/javascript-game-of-life-v3.1.1/\n\ \n\ Copyright\ Mark\ Dutchuk\ -\ NOT\ for\ distribution\ outside\ \n\ the\ ITAS\ classroom.\n\ \n\ NOTE\:\ Set\ DEBUGMODE\ to\ false\ for\ AWT/Swing\ Graphical\ interfae\n\ This\ is\ less\ useful\ for\ debugging\ the\ program\ though\ as\ when\n\ DEBUGMODE\ is\ true,\ it\ draws\ the\ game\ map\ and\ shows\ you\ how\ \n\ many\ neightbours\ each\ cell\ has.\n\ \n\ @author\ Mark\ Dutchuk\ 2016,\ updates\ by\ David\ Croft,\ Nov.\ 2020\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ Main\ entry\ point\ into\ application.\ Requires\ no\ arguments\ at\ runtime.\n
comment10.params=
comment10.target=int\ getSizeX()
comment10.text=\n\ Used\ by\ the\ Unit\ testing\ code\ \n
comment11.params=
comment11.target=int\ getSizeY()
comment11.text=\n\ Used\ by\ the\ Unit\ testing\ code\ \n
comment2.params=
comment2.target=void\ setup()
comment2.text=\n\ Sets\ the\ initial\ conditions\ of\ the\ game.\n\ DON'T\ CHANGE\ THIS\ ARRAY\!\ -\ Doing\ so\ will\ cause\n\ the\ unit\ tests\ to\ fail.\ But\ you\ could\ create\ \n\ another\ array\ and\ assign\ it\ (see\ below)\ if\ you\ want\n\ to\ experiment.\ As\ long\ as\ its\ easy\ to\ flip\ back\ \n\ to\ this\ data\ for\ testing.\n
comment3.params=
comment3.target=void\ run()
comment3.text=\n\ Loops\ through\ the\ various\ program\ functions\ MAX_GENERATIONS\ number\ of\ times.\ \ \n\ Each\ loop\ represents\ one\ generation\ of\ a\ biological\ matrix,\ where\ individual\n\ cells\ live,\ die,\ or\ are\ born\ into\ the\ matrix.\n
comment4.params=a
comment4.target=void\ printArray(boolean[][])
comment4.text=\n\ Print\ the\ celular\ matrix\ to\ the\ console.\ For\ every\ cell\ in\ the\ matrix,\ if\ \n\ the\ cell\ is\ alive,\ print\ the\ number\ of\ neighbors\ that\ cell\ has.\ If\ the\ cell\n\ is\ dead,\ print\ an\ empty\ space.\n
comment5.params=x\ y
comment5.target=int\ calcNumNeighbors(int,\ int)
comment5.text=\n\ Given\ a\ cell\ at\ a\ particular\ x\ and\ y\ coordinate,\ calculate\ the\ number\ \n\ of\ 'live'\ cells\ directly\ next\ to\ it.\ \ Should\ return\ a\ number\ between\n\ 0\ and\ 8.\ \ Must\ not\ count\ the\ cell\ at\ position\ x,y,\ since\ that\ is\ the\ \n\ cell\ itself\ and\ not\ a\ neighbor.\ Must\ be\ careful\ when\ calculating\ \n\ neighbours\ around\ the\ edges\ of\ the\ matrix\ to\ avoid\ \n\ index-out-of-bounds\ errors.\n\n\ @param\ x\ int\ the\ cell\ location's\ X\ coordinate\n\ @param\ y\ int\ the\ cell\ location's\ Y\ coordinate\n\ @return\ int\ -\ the\ number\ of\ neighbors\ surrounding\ this\ cell\ location\n
comment6.params=
comment6.target=void\ calcNextGen()
comment6.text=\ \n\ For\ every\ element\ in\ the\ current\ array,\ calculate\ whether\ the\ cell\ lives\ on\ \n\ into\ the\ next\ generation\:\n\ <p>\ -\ Any\ live\ cell\ with\ fewer\ than\ two\ live\ neighbours\ dies,\ as\ if\ caused\ by\ under-population.\n\ <p>\ -\ Any\ live\ cell\ with\ two\ or\ three\ live\ neighbours\ lives\ on\ to\ the\ next\ generation.\n\ <p>\ -\ Any\ live\ cell\ with\ more\ than\ three\ live\ neighbours\ dies,\ as\ if\ by\ overcrowding.\n\ <p>\ -\ Any\ dead\ cell\ with\ exactly\ three\ live\ neighbours\ becomes\ a\ live\ cell,\ as\ if\ by\ reproduction.\n
comment7.params=
comment7.target=void\ copyArray()
comment7.text=\n\ Copy\ the\ next\ array\ to\ the\ current\ array\n
comment8.params=w
comment8.target=void\ drawImage(boolean[][])
comment8.text=\n\ Outputs\ the\ 2D\ world\ created\ above\ as\ a\ graphics\ image\n\ DO\ NOT\ MODIFY\n
comment9.params=
comment9.target=void\ clearScreen()
comment9.text=\n\ Clear\ the\ BlueJ\ console\ screen\ and\ put\ the\ cursor\ in\ the\ top\ left\ position\n
numComments=12
